package chordtype

var mapTypeToName = map[Type]string{
	Invalid: "Invalid",

	// Dyad
	PowerChord: "5",

	// Triad
	Diminished:                            "o",
	MinorDoubleFlatFifth:                  "mbb5",
	Minor:                                 "m",
	MinorAddNinth:                         "m(add9)",
	MinorAddEleventh:                      "m(add11)",
	MinorAddFourth:                        "m(add4)",
	MinorAddSharpFourth:                   "m(add(#4))",
	MinorAddSharpNinth:                    "m(add(#9))",
	MinorSharpFifth:                       "m#5",
	MajorFlatFifth:                        "Mb5",
	Major:                                 "M",
	MajorAddNinth:                         "M(add9)",
	MajorAddFourth:                        "M(add4)",
	MajorAddEleventh:                      "M(add11)",
	MajorAddSharpFourth:                   "M(add(#4))",
	MajorAddSharpNinth:                    "M(add(#9))",
	MajorDoubleSharpFifth:                 "M##5",
	Augmented:                             "+",
	SuspendedSecondDoubleFlatFifth:        "sus2bb5",
	SuspendedSecondFlatFifth:              "sus2b5",
	SuspendedSecondFlatFifthAddSharpFifth: "sus2b5add(#5)",
	SuspendedSecond:                       "sus2",
	SuspendedSecondSharpFifth:             "sus2#5",
	SuspendedFourthFlatFifth:              "sus4b5",
	SuspendedFourth:                       "sus4",
	SuspendedFourthSharpFifth:             "sus4#5",
	SuspendedFourthDoubleSharpFifth:       "sus4##5",
	Phrygian:                              "phryg",
	PhrygianAddSeventh:                    "phryg+7",
	Lydian:                                "lyd",
	LydianMajorSeventh:                    "lyd(M7)",
	Locrian:                               "loc",
	Quartal:                               "Q",
	QuartalAugmented:                      "Q+",

	// Sixth
	MinorSixth:                               "m6",
	MinorSixthAddNinth:                       "m6(add9)",
	MinorSixthAddFlatNinth:                   "m6(addb9)",
	MajorSixth:                               "M6",
	MajorSixthAddFlatNinth:                   "M6(addb9)",
	MajorSixthAddNinth:                       "M6(add9)",
	MajorSixthFlatFifth:                      "M6b5",
	MajorSixthSuspendedSecond:                "M6sus2",
	MajorSixthSuspendedSecondFlatFifth:       "M6sus2b5",
	MajorSixthSuspendedSecondDoubleFlatFifth: "M6sus2bb5",
	MajorSixthSuspendedFourth:                "M6sus4",

	// Seventh
	FullDiminishedSeventh:                       "o7",
	HalfDiminishedSeventh:                       "Ã¸7",
	MinorSeventhDoubleFlatFifth:                 "m7bb5",
	MinorSeventh:                                "m7",
	MinorSeventhAddEleventh:                     "m7add11",
	MinorSeventhAddThirteenth:                   "m7add13",
	MinorSeventhAddSharpEleventh:                "m7add(#11)",
	MinorSeventhSharpFifth:                      "m7#5",
	MinorSeventhFlatNinth:                       "m7b9",
	MinorMajorSeventh:                           "m(M7)",
	MinorMajorSeventhAddEleventh:                "m(M7)add11",
	MinorMajorSeventhAddThirteenth:              "m(M7)add13",
	DominantSeventhFlatFifth:                    "7b5",
	DominantSeventhSuspendedSecondFlatFifth:     "7sus2b5",
	DominantSeventhSuspendedSecond:              "7sus2",
	DominantSeventhSuspendedFourth:              "7sus4",
	DominantSeventh:                             "7",
	DominantSeventhAddFourth:                    "7add4",
	DominantSeventhAddEleventh:                  "7add11",
	DominantSeventhAddThirteenth:                "7add13",
	DominantSeventhAddSharpFourth:               "7add(#4)",
	DominantSeventhFlatFifthFlatNinth:           "7b5b9",
	DominantSeventhSharpFifthFlatNinth:          "7#5b9",
	DominantSeventhFlatNinth:                    "7b9",
	DominantSeventhFlatNinthFlatThirteenth:      "7b9b13",
	DominantSeventhSharpNinth:                   "7#9",
	DominantSeventhSharpNinthSharpEleventh:      "7#9#11",
	DominantSeventhSharpEleventh:                "7#11",
	DiminishedMajorSeventh:                      "oM7",
	MajorSeventhFlatFifth:                       "M7b5",
	MajorSeventhSuspendedSecond:                 "M7(sus2)",
	MajorSeventhSuspendedFourth:                 "M7(sus4)",
	MajorSeventhSuspendedFourthSharpFifth:       "M7(sus4)#5",
	MajorSeventhSuspendedFourthDoubleSharpFifth: "M7(sus4)##5",
	MajorSeventh:                                "M7",
	MajorSeventhAddFourth:                       "M7add4",
	MajorSeventhAddEleventh:                     "M7add11",
	MajorSeventhAddThirteenth:                   "M7add13",
	MajorSeventhAddSharpEleventh:                "M7add(#11)",
	MajorSeventhAddSharpFourth:                  "M7add(#4)",
	MajorSeventhDoubleSharpFifth:                "M7##5",
	AugmentedMajorSeventh:                       "+(M7)",
	AugmentedAugmentedSeventh:                   "+7",

	// Ninth
	MinorNinth:                   "m9",
	MinorMajorNinth:              "m(M9)",
	DominantNinth:                "9",
	DominantNinthSuspendedSecond: "9sus2",
	DominantNinthSuspendedFourth: "9sus4",
	DominantNinthSharpEleventh:   "9#11",
	DominantNinthFlatThirteenth:  "9b13",
	MajorNinth:                   "M9",
	MajorNinthSuspendedSecond:    "M9sus2",
	MajorNinthSuspendedFourth:    "M9sus4",

	// Eleventh
	MinorEleventh:      "m11",
	MinorMajorEleventh: "m(M11)",
	DominantEleventh:   "11",
	MajorEleventh:      "M11",

	// Thirteenth
	MinorThirteenth:             "m13",
	MinorMajorThirteenth:        "m(M13)",
	DominantThirteenth:          "13",
	DominantThirteenthFlatNinth: "13b9",
	MajorThirteenth:             "M13",
}

// Name retuns chord type name
func (t Type) Name() string {
	return mapTypeToName[t]
}
